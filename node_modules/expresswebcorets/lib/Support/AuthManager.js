"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
//@ts-ignore
const auth_1 = __importDefault(require("../../../../Config/auth"));
const jsonwebtoken_1 = __importDefault(require("jsonwebtoken"));
class AuthManager {
    getAuthenticator() {
        return auth_1.default.authenticator;
    }
    authenticatorOptions() {
        switch (this.getAuthenticator()) {
            case "jwt":
                return this.checkAppKey();
            default:
                throw new Error("Please select a valid Auth Authenticator in App/Config/auth.js file");
        }
    }
    checkAppKey() {
        if (auth_1.default.jwt.secret) {
            if (auth_1.default.jwt.secret.length == 0) {
                throw new Error("Error:Can't generate token. Please create your APP_KEY in .env file.");
            }
            return auth_1.default.jwt;
        }
        else {
            throw new Error("Error: Can't process auth token. Please create your APP_KEY in .env file.");
        }
    }
    sign(payload, secretOrPrivateKey, options) {
        switch (this.getAuthenticator()) {
            case "jwt":
                return jsonwebtoken_1.default.sign(payload, secretOrPrivateKey, options);
            default:
                break;
        }
    }
    verify(token, secretOrPublicKey, callback) {
        switch (this.getAuthenticator()) {
            case "jwt":
                return jsonwebtoken_1.default.verify(token, secretOrPublicKey, callback);
            default:
                break;
        }
    }
}
exports.default = AuthManager;
