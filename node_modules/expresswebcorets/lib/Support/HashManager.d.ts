import ArgonHasher from "../Hashing/ArgonHasher";
import BcryptHasher from "../Hashing/BcryptHasher";
declare abstract class Manager {
    /**
     * The array of created "drivers".
     *
     * @var array
     */
    protected drivers: string[];
    /**
   * Create an instance of the Bcrypt hash Driver.
   *
   * @return \elicidate\Hashing\BcryptHasher
   */
    createBcryptDriver(): BcryptHasher;
    /**
     * Create an instance of the Argon2i hash Driver.
     *
     * @return \elicidate\Hashing\ArgonHasher
     */
    createArgonDriver(): ArgonHasher;
    /**
    * Get a driver instance.
    *
    * @param  string|null  $driver
    * @return mixed
    *
    * @throws \InvalidArgumentException
    */
    driver(): any;
    /**
     * Get the default driver name.
     *
     * @return string
     */
    getDefaultDriver(): any;
}
export default Manager;
//# sourceMappingURL=HashManager.d.ts.map