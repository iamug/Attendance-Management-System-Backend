"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/*
 * expressweb-database-sucket
 *
 * (c) Alex Igbokwe <chukwuemekaigbokwe80@gmail.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
const ENV_1 = __importDefault(require("../ENV"));
//@ts-ignore
const database_1 = __importDefault(require("../../../../Config/database"));
const objection_1 = require("objection");
const knex_1 = __importDefault(require("knex"));
/**
 * Database connection class to manage
 * based on configurations saved inside `config/database.js` file.
 *
 * @class DatabaseConnection
 * @constructor
 */
class DatabaseConnection {
    constructor() {
        if (ENV_1.default("DB_SHOULD_CONNECT") == "true") {
            this.checkDriver();
        }
    }
    checkDriver() {
        switch (database_1.default.Default_connection) {
            case "mysql":
                this.mysql(database_1.default.mysql);
                break;
            case "pg":
                this.postgre(database_1.default.pg);
                break;
            case "mongoose":
                this.mongo(database_1.default.mongoose);
                break;
            default:
                this._error();
        }
    }
    /**
     * Mongo DB connection
     *
     * @method _mongo
     *
     * @param {Object} database
     *
     * @private
     */
    async mongo(database) {
        let mongoose = require("mongoose");
        let link = "";
        if (!database.user && !database.password) {
            link =
                "mongodb://" +
                    database.host +
                    ":" +
                    database.port +
                    "/" +
                    database.database;
        }
        else {
            link = database.connection.connection_link;
        }
        mongoose.connect(link, {
            useCreateIndex: database.useCreateIndex,
            useNewUrlParser: database.useNewUrlParser,
            useUnifiedTopology: database.useUnifiedTopology,
        }, function (err) {
            if (err)
                throw err;
        });
    }
    /**
     * MySql DB connection
     *
     * @method _mysql
     *
     * @param {Object} database
     *
     * @private
     */
    mysql(database) {
        try {
            const knex = knex_1.default(database);
            objection_1.Model.knex(knex);
        }
        catch (error) {
            console.log(error);
        }
    }
    /**
     * Postgre DB connection
     *
     * @method _postgre
     *
     * @param {Object} database
     *
     * @private
     */
    postgre(database) {
        try {
            const knex = knex_1.default(database);
            objection_1.Model.knex(knex);
        }
        catch (error) {
            console.log(error);
        }
    }
    _error() {
        console.log("Database is not supported. Please visit App/config/database.js to see supported database");
        console.log("Supported Database Options Are: mysql, pg for Postgre, and mongoose");
    }
}
exports.default = DatabaseConnection;
