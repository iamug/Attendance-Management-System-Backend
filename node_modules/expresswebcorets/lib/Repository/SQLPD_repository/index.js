"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class SQLPD_repository {
    constructor(collection) {
        this._collection = collection;
        this.columnName = "id";
        this.order = "ASC";
    }
    async getAll(sortBy, paginate) {
        if (sortBy !== undefined) {
            this.columnName = sortBy.columnName;
            this.order = sortBy.order.toUpperCase();
        }
        if (paginate !== undefined) {
            let pageNumber = paginate.pageNumber;
            let dataSize = paginate.dataSize;
            return await this._collection
                .query()
                .orderBy(this.columnName, this.order)
                .page(pageNumber, dataSize)
                .then((result) => {
                return result;
            })
                .catch((error) => {
                return error;
            });
        }
        else {
            return await this._collection
                .query()
                .orderBy(this.columnName, this.order)
                .then((result) => {
                return result;
            })
                .catch((error) => {
                return error;
            });
        }
    }
    async getAllWhere(args, sortBy, paginate) {
        if (sortBy !== undefined) {
            this.columnName = sortBy.columnName;
            this.order = sortBy.order.toUpperCase();
        }
        if (paginate !== undefined) {
            let pageNumber = paginate.pageNumber;
            let dataSize = paginate.dataSize;
            return await this._collection
                .query()
                .where(args)
                .orderBy(this.columnName, this.order)
                .page(pageNumber, dataSize)
                .then((result) => {
                return result;
            })
                .catch((error) => {
                return error;
            });
        }
        else {
            return await this._collection
                .query()
                .where(args)
                .orderBy(this.columnName, this.order)
                .then((result) => {
                return result;
            })
                .catch((error) => {
                return error;
            });
        }
    }
    async findBy(columnName, item) {
        return await this._collection
            .query()
            .where(`${columnName}`, item)
            .then((result) => {
            return result;
        })
            .catch((error) => {
            return error;
        });
    }
    async findOne(whereArgs) {
        return await this._collection
            .query()
            .findOne(whereArgs)
            .then((result) => {
            return result;
        })
            .catch((error) => {
            return error;
        });
    }
    async findMany(columnName, pointers) {
        return await this._collection
            .query()
            .whereIn(`${columnName}`, pointers)
            .then((result) => {
            return result;
        })
            .catch((error) => {
            return error;
        });
    }
    async create(item) {
        return await this._collection
            .query()
            .insert(item)
            .then((result) => {
            return result;
        })
            .catch((error) => {
            return error;
        });
    }
    async updateOne(id, item) {
        return await this._collection
            .query()
            .patchAndFetchById(id, item)
            .then((result) => {
            return result;
        })
            .catch((error) => {
            return error;
        });
    }
    async updateOneWhere(args, item) {
        return await this._collection
            .query()
            .where(args)
            .patchAndFetch(item)
            .then((result) => {
            return result;
        })
            .catch((error) => {
            return error;
        });
    }
    async updateMany(columnName, pointers, item) {
        return await this._collection
            .query()
            .whereIn(`${columnName}`, pointers)
            .patch(item)
            .then((result) => {
            return result;
        })
            .catch((error) => {
            return error;
        });
    }
    async deleteById(id) {
        return await this._collection
            .query()
            .deleteById(id)
            .then((result) => {
            return result;
        })
            .catch((error) => {
            return error;
        });
    }
    async deleteWhere(condition) {
        return await this._collection
            .query()
            .delete()
            .where(condition)
            .then((result) => {
            return result;
        })
            .catch((error) => {
            return error;
        });
    }
    async deleteMany(columnName, pointers) {
        return await this._collection
            .query()
            .delete()
            .whereIn(`${columnName}`, pointers)
            .then((result) => {
            return result;
        })
            .catch((error) => {
            return error;
        });
    }
}
exports.default = SQLPD_repository;
