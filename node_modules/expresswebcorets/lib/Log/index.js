"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const log4js_1 = require("log4js");
//@ts-ignore
const logging_1 = __importDefault(require("../../../../Config/logging"));
const logLevel = logging_1.default.logLevel;
const logger = log4js_1.getLogger(logging_1.default.default);
logger.level = logLevel.toLowerCase();
log4js_1.configure({
    appenders: logging_1.default.channels,
    categories: {
        default: { appenders: ["console", "file"], level: logLevel.toUpperCase() },
        file: { appenders: ["file"], level: logLevel.toUpperCase() },
    },
});
class Log {
    static info(namespace, message, object) {
        if (object) {
            logger.info(`[${namespace}] message - [${message}]`, object);
        }
        else {
            logger.info(`[${namespace}] message - [${message}]`);
        }
    }
    static warn(namespace, message, object) {
        if (object) {
            logger.warn(`[${namespace}] message - [${message}]`, object);
        }
        else {
            logger.warn(`[${namespace}] message - [${message}]`);
        }
    }
    static error(namespace, message, object) {
        if (object) {
            logger.error(`[${namespace}] message - [${message}]`, object);
        }
        else {
            logger.error(`[${namespace}] message - [${message}]`);
        }
    }
    static debug(namespace, message, object) {
        if (object) {
            logger.debug(`[${namespace}] message - [${message}]`, object);
        }
        else {
            logger.debug(`[${namespace}] message - [${message}]`);
        }
    }
}
exports.default = Log;
