/// <reference types="express" />
import { Response } from "./index";
declare class HttpResponse {
    static OK(res: Response, payload: any): Response<any, Record<string, any>>;
    static CREATED(res: Response): Response<any, Record<string, any>>;
    static BAD_REQUEST(res: Response, payload: any): Response<any, Record<string, any>>;
    static UNAUTHORIZED(res: Response, error: any): Response<any, Record<string, any>>;
    static PAYMENT_REQUIRED(res: Response, error: any): Response<any, Record<string, any>>;
    static FORBIDDEN(res: Response, payload?: any): Response<any, Record<string, any>>;
    static NOTFOUND(res: Response, payload?: any): Response<any, Record<string, any>>;
    static METHOD_NOT_ALLOWED(res: Response, error: any): Response<any, Record<string, any>>;
    static NOTACCEPTED(res: Response, error: any): Response<any, Record<string, any>>;
    static PROXY_AUTHENTICATION_REQUIRED(res: Response, error: any): Response<any, Record<string, any>>;
    static REQUEST_TIMEOUT(res: Response, error: any): Response<any, Record<string, any>>;
    static CONFLICT(res: Response, error: any): Response<any, Record<string, any>>;
    static GONE(res: Response, error: any): Response<any, Record<string, any>>;
    static LENGTH_REQUIRED(res: Response, error: any): Response<any, Record<string, any>>;
    static PRECONDITION_FAILED(res: Response, error: any): Response<any, Record<string, any>>;
    static PAYLOAD_TOO_LARGE(res: Response, error: any): Response<any, Record<string, any>>;
    static URL_TOO_LONG(res: Response, error: any): Response<any, Record<string, any>>;
    static UNSUPPORTED_MEDIA_TYPE(res: Response, error: any): Response<any, Record<string, any>>;
    static RANGE_NOT_FOUND(res: Response, error: any): Response<any, Record<string, any>>;
    static EXPECTATION_FAILED(res: Response, error: any): Response<any, Record<string, any>>;
    static IMA_TEA_POT(res: Response, error: any): Response<any, Record<string, any>>;
    static MISDIRECTION_REQUEST(res: Response, error: any): Response<any, Record<string, any>>;
    static UNPROCESSABLE_ENTITY(res: Response, payload?: any): Response<any, Record<string, any>>;
    static LOCKED(res: Response, error: any): Response<any, Record<string, any>>;
    static FAILED_DEPENDENCY(res: Response, error: any): Response<any, Record<string, any>>;
    static UNORDERED_COLLECTION(res: Response, error: any): Response<any, Record<string, any>>;
    static UPGRADE_REQUIRED(res: Response, error: any): Response<any, Record<string, any>>;
    static PRECONDITION_REQUIRED(res: Response, error: any): Response<any, Record<string, any>>;
    static TOO_MANY_REQUESTS(res: Response, error: any): Response<any, Record<string, any>>;
    static REQUEST_HEADERFIELDS_TOO_LARGE(res: Response, error: any): Response<any, Record<string, any>>;
    static UNAVAILABLE_FOR_LEGAL_REASONS(res: Response, error: any): Response<any, Record<string, any>>;
    static INTERNAL_SERVER_ERROR(res: Response, payload?: any): Response<any, Record<string, any>>;
    static NOT_IMPLEMENTED(res: Response, error: any): Response<any, Record<string, any>>;
    static BAD_GATEWAY(res: Response, payload?: any): Response<any, Record<string, any>>;
    static SERVICE_UNAVAILABLE(res: Response, payload?: any): Response<any, Record<string, any>>;
    static GATEWAY_TIMEOUT(res: Response, error: any): Response<any, Record<string, any>>;
    static HTTP_VERSION_NOT_SUPPORTED(res: Response, error: any): Response<any, Record<string, any>>;
    static VARIANT_ALSO_NEGOTIATES(res: Response, error: any): Response<any, Record<string, any>>;
    static INSUFFICIENT_STORAGE(res: Response, error: any): Response<any, Record<string, any>>;
    static LOOP_DETECTED(res: Response, error: any): Response<any, Record<string, any>>;
    static BANDWIDTH_LIMIT_EXCCEEDED(res: Response, error: any): Response<any, Record<string, any>>;
    static NOTEXTENTED(res: Response, error: any): Response<any, Record<string, any>>;
    static NETWORK_AUTHENTICATION_REQUIRED(res: Response, error: any): Response<any, Record<string, any>>;
}
export default HttpResponse;
//# sourceMappingURL=ResponseType.d.ts.map