import NodeError from "./Exceptions";
/**
 * Runtime exception is thrown when some unexpected behavior occures
 *
 * @class RuntimeException
 */
declare class RuntimeException extends NodeError.RuntimeException {
    static get context(): string;
    /**
     * Missing config exception is thrown when configuration
     * is not defined for a given key
     * @param  {String} key
     * @param  {String} configLocation
     *
     * @return {RuntimeException}
     */
    static missingConfig<T>(key: T, configLocation: T): RuntimeException;
    /**
     * This exception is raised when appKey is missing
     * inside the config file but required to make
     * some operation
     * @param  {String} provider - provider using the app key
     * @return {RuntimeException}
     */
    static missingAppKey<T>(provider: T): RuntimeException;
    /**
     * This exception is raised when environment variable
     * is not defined, but is required for app operation.
     * @param  {String} environment variable name (e.g. `HOME` or `PATH`)
     * @return {RuntimeException}
     */
    static missingEnvKey<T>(key: T): RuntimeException;
    /**
     * This exception is raised when configuration is not
     * complete for a given config file or key
     * @param  {Array}  missingKeys
     * @param  {String} file
     * @param  {String} forKey
     * @return {RuntimeException}
     */
    static incompleteConfig<T>(missingKeys: any, file: T, forKey: T): RuntimeException;
    /**
   * This exception is raised when configuration is not
   * complete for a given config file or key
   * @param  {Array}  missingKeys
   * @param  {String} file
   * @param  {String} forKey
   * @return {RuntimeException}
   */
    static iocNamespace(namespace: string): RuntimeException;
    /**
     * Invoke instance of this class with a custom message
     * status and error code
     * @param  {String} message
     * @param  {Number} [status = 500]
     * @param  {String} [code = E_RUNTIME_ERROR]
     * @return {RuntimeException}
     */
    static invoke<T>(message: T, status?: number, code?: string): RuntimeException;
}
export default RuntimeException;
//# sourceMappingURL=RunTime.d.ts.map