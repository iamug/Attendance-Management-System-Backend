'use strict';
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/*
 * expressweb-runtimeException
 *
 * (c) Alex Igbokwe <chukwuemekaigbokwe80@gmail.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
*/
const Exceptions_1 = __importDefault(require("./Exceptions"));
/**
 * Runtime exception is thrown when some unexpected behavior occures
 *
 * @class RuntimeException
 */
class RuntimeException extends Exceptions_1.default.RuntimeException {
    static get context() {
        return 'expresswebjs-errors';
    }
    /**
     * Missing config exception is thrown when configuration
     * is not defined for a given key
     * @param  {String} key
     * @param  {String} configLocation
     *
     * @return {RuntimeException}
     */
    static missingConfig(key, configLocation) {
        const message = `${key} is not defined inside ${configLocation} file`;
        return new this(message, 500, 'E_MISSING_CONFIG', this.context);
    }
    /**
     * This exception is raised when appKey is missing
     * inside the config file but required to make
     * some operation
     * @param  {String} provider - provider using the app key
     * @return {RuntimeException}
     */
    static missingAppKey(provider) {
        const message = `Make sure to define appKey inside .env file before using ${provider} provider`;
        return new this(message, 500, 'E_MISSING_APP_KEY', this.context);
    }
    /**
     * This exception is raised when environment variable
     * is not defined, but is required for app operation.
     * @param  {String} environment variable name (e.g. `HOME` or `PATH`)
     * @return {RuntimeException}
     */
    static missingEnvKey(key) {
        const message = `Make sure to define environment variable ${key}.`;
        return new this(message, 500, 'E_MISSING_ENV_KEY', this.context);
    }
    /**
     * This exception is raised when configuration is not
     * complete for a given config file or key
     * @param  {Array}  missingKeys
     * @param  {String} file
     * @param  {String} forKey
     * @return {RuntimeException}
     */
    static incompleteConfig(missingKeys, file, forKey) {
        const baseMessage = `Make sure to define ${missingKeys.join(', ')}`;
        const message = forKey ? `${baseMessage} on ${forKey} inside ${file}` : `${baseMessage} inside ${file}`;
        return new this(message, 500, 'E_INCOMPLETE_CONFIG', this.context);
    }
    /**
   * This exception is raised when configuration is not
   * complete for a given config file or key
   * @param  {Array}  missingKeys
   * @param  {String} file
   * @param  {String} forKey
   * @return {RuntimeException}
   */
    static iocNamespace(namespace) {
        let message = `An instance of ${namespace} already exists in the IOC. Kindly rename it and try again`;
        return new this(message, 500, 'E_NAMESPACE_CONFLICT', this.context);
    }
    /**
     * Invoke instance of this class with a custom message
     * status and error code
     * @param  {String} message
     * @param  {Number} [status = 500]
     * @param  {String} [code = E_RUNTIME_ERROR]
     * @return {RuntimeException}
     */
    static invoke(message, status = 500, code = 'E_RUNTIME_ERROR') {
        return new this(message, status, code, this.context);
    }
}
exports.default = RuntimeException;
