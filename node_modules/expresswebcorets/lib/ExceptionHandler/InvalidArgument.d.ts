import NodeError from "./Exceptions";
/**
 * Invalid argument exception is thrown when methods or functions
 * arguments are missing or wrong.
 *
 * @class InvalidArgumentException
 */
declare class InvalidArgumentException extends NodeError.InvalidArgumentException {
    static get context(): string;
    /**
     * Throw exception when the parameter received is invalid
     * @param  {String} errorMessage
     * @param  {Mixed}  originalValue
     *
     * @return {InvalidArgumentException}
     */
    static invalidParameter<T>(errorMessage: T, originalValue: T): InvalidArgumentException;
    /**
     * Invoke instance of current class with a custom message
     * status and error code
     * @param  {String} message
     * @param  {Number} [status = 500]
     * @param  {String} [code = E_INVALID_ARGUMENT]
     *
     * @return {InvalidArgumentException}
     */
    static invoke<T>(message: T, status?: number, code?: string): InvalidArgumentException;
    /**
     * Throw an exception when there is a missing parameter
     * @param  {String} method
     * @param  {String} parameterName
     * @param  {String|Number} position
     *
     * @return {InvalidArgumentException}
     */
    static missingParameter<T>(method: T, parameterName: T, position: T): InvalidArgumentException;
}
export default InvalidArgumentException;
//# sourceMappingURL=InvalidArgument.d.ts.map