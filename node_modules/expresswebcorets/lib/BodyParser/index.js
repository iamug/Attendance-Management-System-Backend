"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/*
 * expressweb-body-parser
 *
 * (c) Alex Igbokwe <chukwuemekaigbokwe80@gmail.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
const express_1 = __importDefault(require("express"));
//@ts-ignore
const bodyParser_1 = __importDefault(require("../../../../Config/bodyParser"));
/**
 * Parse incoming request bodies in a middleware before your handlers,
 * available under the req.body property.
 *
 * Note As req.body's shape is based on user-controlled input
 *
 * @class BodyParser
 * @constructor
 */
class BodyParser {
    constructor(Application) {
        this.options = bodyParser_1.default;
        this.app = Application;
        this.handle();
    }
    handle() {
        this._json();
        this._raw();
        this._form();
        this._files();
    }
    /*
    |--------------------------------------------------------------------------
    | JSON Parser
    |--------------------------------------------------------------------------
    |
    | Below settings are applied when the request body contains a JSON payload.
    | If you want body parser to ignore JSON payloads, then simply set `types`
    | to an empty array.
    */
    _json() {
        return this.app.use(express_1.default.json(this.options.json));
    }
    /**
     * Raw Parser
     */
    _raw() {
        return this.app.use(express_1.default.json(this.options.raw));
    }
    /**
     * Form Parser
     */
    _form() {
        return this.app.use(express_1.default.json(this.options.form));
    }
    /**
     * Files Parser
     */
    _files() {
        return this.app.use(express_1.default.json(this.options.files));
    }
}
exports.default = BodyParser;
