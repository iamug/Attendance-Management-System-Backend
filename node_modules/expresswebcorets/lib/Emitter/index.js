"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Emitter_1 = __importDefault(require("./Emitter"));
const emitter = new Emitter_1.default();
class EmitEvent {
    emitOnce(event, listener) {
        return emitter.once(event, listener);
    }
    addEventListener(event, listener) {
        return emitter.addListener(event, listener);
    }
    /**
     * Bind a listener to an event.
     * @Note This adds a listener to the listeners array without checking if the listener is already in the array for the specified event
     * @param event
     * @param listener
     * @returns
     */
    bind(event, listener) {
        return emitter.on(event, listener);
    }
    removeEventListener(event, listener) {
        return emitter.removeListener(event, listener);
    }
    unBind(event, listener) {
        return emitter.off(event, listener);
    }
    /**
     * This removes all listerners in the listener array.
     * @param event
     * @returns
     */
    removeAllEventListeners(event) {
        return emitter.removeAllListeners(event);
    }
    setEventMaxListeners(n) {
        return emitter.setMaxListeners(n);
    }
    getMaxEventListeners() {
        return emitter.getMaxListeners();
    }
    eventListeners(event) {
        return emitter.listeners(event);
    }
    rawEventListeners(event) {
        return emitter.rawListeners(event);
    }
    eventListenerCount(event) {
        return emitter.listenerCount(event);
    }
    prependEventListeners(event, listener) {
        return emitter.prependListener(event, listener);
    }
    prependEventListenersOnce(event, listener) {
        return emitter.prependOnceListener(event, listener);
    }
    emitEvent(event, ...args) {
        return emitter.emit(event, args);
    }
    getEventNames() {
        return emitter.eventNames();
    }
}
exports.default = new EmitEvent();
