declare class EmitEvent {
    /**
     * Bind a listener to an event once.
     * @Note This adds a listener to the listeners array once.
     * @param event
     * @param listener
     * @returns
     */
    bindOnce(event: string | symbol, listener: (...args: any[]) => void): any;
    addEventListener(event: string | symbol, listener: (...args: any[]) => void): any;
    /**
     * Bind a listener to an event.
     * @Note This adds a listener to the listeners array without checking if the listener is already in the array for the specified event
     * @param event
     * @param listener
     * @returns
     */
    bind(event: string | symbol, listener: (...args: any[]) => void): any;
    removeEventListener(event: string | symbol, listener: (...args: any[]) => void): any;
    unBind(event: string | symbol, listener: (...args: any[]) => void): any;
    /**
     * This removes all listerners in the listener array.
     * @param event
     * @returns
     */
    removeAllEventListeners(event?: string | symbol): any;
    setEventMaxListeners(n: number): any;
    getMaxEventListeners(): number;
    eventListeners(event: string | symbol): Function[];
    rawEventListeners(event: string | symbol): Function[];
    eventListenerCount(event: string | symbol): number;
    prependEventListeners(event: string | symbol, listener: (...args: any[]) => void): any;
    prependEventListenersOnce(event: string | symbol, listener: (...args: any[]) => void): any;
    emitEvent(event: string | symbol, ...args: any[]): boolean;
    getEventNames(): Array<string | symbol>;
}
declare const _default: EmitEvent;
export default _default;
//# sourceMappingURL=index.d.ts.map