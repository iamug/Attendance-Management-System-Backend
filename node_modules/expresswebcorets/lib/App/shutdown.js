"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const dotenv = __importStar(require("dotenv"));
dotenv.config();
//@ts-ignore
const app_1 = __importDefault(require("../../../../Config/app"));
class AppShutDown {
    /**
     * This check if App is down for maintenance
     * @return Array
     */
    static isDownForMaintenance() {
        return this.checkMode(app_1.default.maintenanceMode.mode)
            ? this.maintanceMode()
            : { status: false, message: "", retry: null, endPoints: null };
    }
    /**
     * Determine if the request has a URI that should be accessible in maintenance mode
     * @param {Request} request
     * @param {Object} endpoints
     * @return Boolean
     */
    static inEndpointsArray(request, endpoints) {
        if (endpoints.length == 0)
            return false;
        return endpoints.includes(request);
    }
    static maintanceMode() {
        let retry = this.getRetryTime(app_1.default.maintenanceMode.retry);
        let message = this.getMessage(app_1.default.maintenanceMode.message);
        if (retry !== null) {
            message = `${message} Kindly check back in ${retry} seconds.`;
        }
        return {
            status: true,
            message: message,
            retry: retry,
            endPoints: app_1.default.maintenanceMode.endPoints,
        };
    }
    /**
     * Get the payload to be sent to the client
     */
    static checkMode(mode) {
        if (typeof mode == "boolean") {
            return mode;
        }
        throw `Error: Application maintenance mode must be a boolean of true or false. ${mode} provided`;
    }
    static getMessage(message) {
        return typeof message == "string" && message !== ""
            ? message
            : "Kindly check back, application is in maintenance mode";
    }
    /**
     * Get the number of seconds the client should wait before retrying their request.
     * @param {Number | null} retry
     */
    static getRetryTime(retry) {
        return typeof retry == "number" && retry > 0 ? retry : null;
    }
}
exports.default = AppShutDown;
