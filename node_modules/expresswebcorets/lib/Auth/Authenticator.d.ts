/// <reference types="node" />
import AuthManager from "../Support/AuthManager";
declare class Authenticator extends AuthManager {
    protected authOptions: any;
    protected user: null | any;
    /**
     * Hash Password
     * @param {string} password
     */
    hashPassword(password: string): any;
    /**
     * Generate Token
     * @param {object} user
     */
    generateToken(user: {
        toJSON: () => string | object | Buffer;
    }): any;
    /**
     * Compare Password
     * @param {string} requestPassword | password comming from request body
     * @param {string} databasePassword | password saved in database
     * @return {boolean} Boolean
     */
    comparePassword(requestPassword: string, databasePassword: string): boolean;
    /**
     * Verify Token
     * @param {String} token
     * @return Promise
     */
    verifyToken(token: string): Promise<unknown>;
    private tryUserModel;
    registerSql(record: object): Promise<any>;
    registerNoSql(record: object | any): Promise<any>;
    private getValues;
    /**
     * Arrange uid and password
     * @param {*} options
     * @param {*} recordData
     */
    private uidPw;
    loginSql(record: object): Promise<{
        error: boolean;
        payload: null;
        msg: string;
    } | {
        error: boolean;
        payload: any;
        msg?: undefined;
    } | {
        error: boolean;
        payload: string;
        msg: string;
    }>;
    loginNoSql(record: object): Promise<any>;
    /**
     * Process user registration details
     * @param {object} record
     */
    processRegistration(record: object): Promise<any>;
    /**
     * Process user login details
     * @param {object} record
     * @return object
     */
    private innerLoginProcess;
    /**
     * Process user login
     * @param {Array} record
     */
    processLogin(record: object): Promise<unknown>;
    /**
     * Create a new user instance
     * @param {object} record
     */
    createUser(record: object): Promise<unknown>;
    /**
     * Process auth middleware
     * @param {string} authorization | req.headers["authorization"]
     */
    processAuthMW(authorization: string | undefined): Promise<{
        type: string;
        payload: unknown;
        msg: string;
    } | {
        type: string;
        payload: any;
        msg: string;
    }> | {
        type: string;
        payload: null;
        msg: string;
    };
    private checkAuthorizationHeader;
}
export default Authenticator;
//# sourceMappingURL=Authenticator.d.ts.map