"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = __importDefault(require("express"));
let Route = express_1.default.Router();
const Controller_1 = __importDefault(require("../Controller"));
const Injector_1 = __importDefault(require("./Injector"));
let methods = {};
//@ts-ignore
const Kernel_1 = __importDefault(require("../../../../App/Http/Kernel"));
let mainParent;
let mainMiddleware;
let version;
function init() {
    if (!mainParent)
        mainParent = [];
    if (!mainMiddleware)
        mainMiddleware = [];
    return [mainParent, mainMiddleware];
}
methods.group = function (prefix, middleware, fn = null) {
    if (typeof prefix != "string") {
        throw "Error: Route prefix should be of type string";
    }
    else if (fn == null && typeof middleware == "function") {
        fn = middleware;
        middleware = undefined;
        [mainParent, mainMiddleware] = init();
        addGroupMiddleware(middleware);
        mainParent.push(prefix);
        fn();
        mainParent.pop();
        mainMiddleware.pop();
    }
    else if (fn == null && typeof middleware != "function") {
        throw `Error: Callback function should be of type function.`;
    }
    else if (typeof prefix == "string" && fn != null) {
        if (typeof middleware == "object") {
            if (typeof fn == "function") {
                [mainParent, mainMiddleware] = init();
                middleware = addGroupMiddleware(middleware);
                mainMiddleware.push(middleware);
                mainParent.push(prefix);
                fn();
                mainParent.pop();
                mainMiddleware.pop();
            }
            else {
                throw `Error: Callback function should be of type function.`;
            }
        }
        else {
            throw middlewareError(middleware);
        }
    }
};
function getMidArray(middlewares, current) {
    let midArr = [];
    middlewares.forEach((element) => {
        if (!element || typeof element == "undefined")
            return;
        if (typeof element == "function")
            midArr.push(element);
        if (Array.isArray(element))
            midArr = midArr.concat(element);
    });
    return addToMiddleware(midArr, current);
}
function addGroupMiddleware(middleware) {
    if (Array.isArray(middleware)) {
        let middlewareList = [];
        middleware.map((element) => {
            if (element !== undefined) {
                middlewareList.push(mapMiddleware(element));
            }
        });
        return middlewareList;
    }
}
function addToMiddleware(midArr, current) {
    if (Array.isArray(current)) {
        let middlewareList = [];
        current.map((element) => {
            if (element !== undefined) {
                middlewareList.push(mapMiddleware(element));
            }
        });
        midArr = midArr.concat(middlewareList);
    }
    else {
        if (current !== undefined) {
            let middleware = mapMiddleware(current);
            midArr.push(middleware);
        }
    }
    return midArr;
}
function mapMiddleware(data) {
    try {
        let path = Kernel_1.default.routeMiddleware[data];
        if (path == null) {
            throw `Error: ${data} middleware not found, try registering middleware in App/Http/kernel.js in routeMiddleware`;
        }
        let splitPath = path.split("/");
        let file = splitPath[splitPath.length - 1];
        let middleware = Injector_1.default.app.use(`${file}_middleware`);
        return middleware.handle;
    }
    catch (error) {
        console.log(error);
        throw "Error: Middleware not found, try registering your middleware in App/Http/kernel.js in routeMiddleware";
    }
}
function processPathAndMiddleware(path, middleware) {
    [mainParent, mainMiddleware] = init();
    let urlPath = mainParent.join("") + path;
    if (version)
        urlPath = "/" + version + urlPath;
    let midArr = getMidArray(mainMiddleware, middleware);
    return { urlPath, midArr };
}
function middlewareError(middleware) {
    return `Error: Middleware should be of type object, not of type ${typeof middleware}. Example [Auth], for multiple middleware [Auth,IsAdmin]`;
}
methods.all = function (path, callback, middleware = null) {
    if (middleware == null) {
        middleware = undefined;
        let { urlPath, midArr } = processPathAndMiddleware(path, middleware);
        if (typeof callback == "string") {
            Route.all(urlPath, midArr, Controller_1.default(callback));
        }
        else {
            Route.all(urlPath, midArr, callback);
        }
    }
    else if (middleware != null && typeof middleware == "object") {
        let { urlPath, midArr } = processPathAndMiddleware(path, middleware);
        if (typeof callback == "string") {
            Route.all(urlPath, midArr, Controller_1.default(callback));
        }
        else {
            Route.all(urlPath, midArr, callback);
        }
    }
    else if (middleware != null && typeof middleware != "object") {
        throw middlewareError(middleware);
    }
};
methods.get = function (path, callback, middleware = null) {
    if (middleware == null) {
        middleware = undefined;
        let { urlPath, midArr } = processPathAndMiddleware(path, middleware);
        if (typeof callback == "string") {
            Route.get(urlPath, midArr, Controller_1.default(callback));
        }
        else {
            Route.get(urlPath, midArr, callback);
        }
    }
    else if (middleware != null && typeof middleware == "object") {
        let { urlPath, midArr } = processPathAndMiddleware(path, middleware);
        if (typeof callback == "string") {
            Route.get(urlPath, midArr, Controller_1.default(callback));
        }
        else {
            Route.get(urlPath, midArr, callback);
        }
    }
    else if (middleware != null && typeof middleware != "object") {
        throw middlewareError(middleware);
    }
};
methods.post = function (path, callback, middleware = null) {
    if (middleware == null) {
        middleware = undefined;
        let { urlPath, midArr } = processPathAndMiddleware(path, middleware);
        if (typeof callback == "string") {
            Route.post(urlPath, midArr, Controller_1.default(callback));
        }
        else {
            Route.post(urlPath, midArr, callback);
        }
    }
    else if (middleware != null && typeof middleware == "object") {
        let { urlPath, midArr } = processPathAndMiddleware(path, middleware);
        if (typeof callback == "string") {
            Route.post(urlPath, midArr, Controller_1.default(callback));
        }
        else {
            Route.post(urlPath, midArr, callback);
        }
    }
    else if (middleware != null && typeof middleware != "object") {
        throw middlewareError(middleware);
    }
};
methods.put = function (path, callback, middleware = null) {
    if (middleware == null) {
        middleware = undefined;
        let { urlPath, midArr } = processPathAndMiddleware(path, middleware);
        if (typeof callback == "string") {
            Route.put(urlPath, midArr, Controller_1.default(callback));
        }
        else {
            Route.put(urlPath, midArr, callback);
        }
    }
    else if (middleware != null && typeof middleware == "object") {
        let { urlPath, midArr } = processPathAndMiddleware(path, middleware);
        if (typeof callback == "string") {
            Route.put(urlPath, midArr, Controller_1.default(callback));
        }
        else {
            Route.put(urlPath, midArr, callback);
        }
    }
    else if (middleware != null && typeof middleware != "object") {
        throw middlewareError(middleware);
    }
};
methods.patch = function (path, callback, middleware = null) {
    if (middleware == null) {
        middleware = undefined;
        let { urlPath, midArr } = processPathAndMiddleware(path, middleware);
        if (typeof callback == "string") {
            Route.patch(urlPath, midArr, Controller_1.default(callback));
        }
        else {
            Route.patch(urlPath, midArr, callback);
        }
    }
    else if (middleware != null && typeof middleware == "object") {
        let { urlPath, midArr } = processPathAndMiddleware(path, middleware);
        if (typeof callback == "string") {
            Route.patch(urlPath, midArr, Controller_1.default(callback));
        }
        else {
            Route.patch(urlPath, midArr, callback);
        }
    }
    else if (middleware != null && typeof middleware != "object") {
        throw middlewareError(middleware);
    }
};
methods.delete = function (path, callback, middleware = null) {
    if (middleware == null) {
        middleware = undefined;
        let { urlPath, midArr } = processPathAndMiddleware(path, middleware);
        if (typeof callback == "string") {
            Route.delete(urlPath, midArr, Controller_1.default(callback));
        }
        else {
            Route.delete(urlPath, midArr, callback);
        }
    }
    else if (middleware != null && typeof middleware == "object") {
        let { urlPath, midArr } = processPathAndMiddleware(path, middleware);
        if (typeof callback == "string") {
            Route.delete(urlPath, midArr, Controller_1.default(callback));
        }
        else {
            Route.delete(urlPath, midArr, callback);
        }
    }
    else if (middleware != null && typeof middleware != "object") {
        throw middlewareError(middleware);
    }
};
methods.exec = Route;
exports.default = methods;
