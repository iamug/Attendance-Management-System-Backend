"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class RouteConfigServiceProvider {
    constructor() {
        this.miniseconds = 60000;
        this.maxAttempts = 0;
        this.decayMin = 0;
        this.message = "Too many requests, please try again later.";
        this.statusCode = 429;
        this.decayHours = 0;
        this.decayDays = 0;
        (this.specificRoutePrefix = null), (this.prefix = null);
    }
    routePrefix(prefix) {
        this.prefix = prefix;
        return this;
    }
    /**
     * MaxAttempts to allow per minute
     *
     * @param  {Number}  maxAttempts
     * @return this
     */
    perMinute(maxAttempts) {
        this.maxAttempts = maxAttempts;
        this.decayMin = 1 * this.miniseconds;
        return this;
    }
    /**
     * Only apply to requests that begin with the specified prefix
     * @param {string|null} prefix
     */
    for(prefix = null) {
        this.specificRoutePrefix = prefix;
        return this;
    }
    /**
     * Error message sent to user when max is exceeded
     * Default message is "Too many requests, please try again later."
     * @param {String} message
     */
    errorMessage(message) {
        if (message != null)
            this.message = message;
        return this;
    }
    /**
     * HTTP status code returned when max is exceeded. Default is 429
     * @param {Number} code
     */
    httpStatusCode(code) {
        this.statusCode = code;
        return this;
    }
    /**
     * MaxAttempts to allow per the specified minute(s) and hour(s)
     *
     * @param  {Number}  maxAttempts
     * @param  {Number}  decayHours
     * @return this
     */
    perHour(maxAttempts, decayHours = 1) {
        this.maxAttempts = maxAttempts;
        this.decayHours = 60 * this.miniseconds * decayHours;
        return this;
    }
    /**
     * MaxAttempts to allow per the specified minute(s) and day(s)
     *
     * @param  {Number}  maxAttempts
     * @param  {Number}  decayDays
     * @return this
     */
    perDay(maxAttempts, decayDays = 1) {
        this.maxAttempts = maxAttempts;
        this.decayDays = 60 * this.miniseconds * 24 * decayDays;
        return this;
    }
    save() {
        let decayTime = null;
        if (this.decayMin)
            decayTime = this.decayMin;
        else if (this.decayHours)
            decayTime = this.decayHours;
        else if (this.decayDays)
            decayTime = this.decayDays;
        return this.handleRequest(this.maxAttempts, decayTime);
    }
    handleRequest(maxAttempts = 100, decayTime) {
        if (decayTime == null)
            decayTime = 60 * this.miniseconds;
        return {
            prifix: this.prefix,
            specificRoutePrefix: this.specificRoutePrefix,
            limiterConfig: {
                windowMs: decayTime,
                max: maxAttempts,
                message: this.message,
                statusCode: this.statusCode, // HTTP status code returned when max is exceeded
            },
        };
    }
}
exports.default = RouteConfigServiceProvider;
