declare class RouteConfigServiceProvider {
    /**
     * Route prefix, default is 'api'.
     *
     * @var string
     */
    prefix: string | null;
    /**
     * Mini secondes in time.
     *
     * @var number
     */
    miniseconds: number;
    /**
     * Request maximum attemtps.
     *
     * @var number
     */
    maxAttempts: number;
    /**
     * Decay time in mins.
     *
     * @var number
     */
    decayMin: number;
    /**
     * Error status code. Default is 429.
     *
     * @var number
     */
    statusCode: number;
    /**
     * Decay time in hours.
     *
     * @var number
     */
    decayHours: number;
    /**
     * Decay time in days.
     *
     * @var number
     */
    decayDays: number;
    /**
     * Route prefix for a specified route.
     *
     * @var string
     */
    specificRoutePrefix: string | null;
    /**
     * Error message
     *
     * @var string
     */
    message: string;
    constructor();
    routePrefix(prefix: string): this;
    /**
     * MaxAttempts to allow per minute
     *
     * @param  {Number}  maxAttempts
     * @return this
     */
    perMinute(maxAttempts: number): this;
    /**
     * Only apply to requests that begin with the specified prefix
     * @param {string|null} prefix
     */
    for(prefix?: string | null): this;
    /**
     * Error message sent to user when max is exceeded
     * Default message is "Too many requests, please try again later."
     * @param {String} message
     */
    errorMessage(message: string | null): this;
    /**
     * HTTP status code returned when max is exceeded. Default is 429
     * @param {Number} code
     */
    httpStatusCode(code: number): this;
    /**
     * MaxAttempts to allow per the specified minute(s) and hour(s)
     *
     * @param  {Number}  maxAttempts
     * @param  {Number}  decayHours
     * @return this
     */
    perHour(maxAttempts: number, decayHours?: number): this;
    /**
     * MaxAttempts to allow per the specified minute(s) and day(s)
     *
     * @param  {Number}  maxAttempts
     * @param  {Number}  decayDays
     * @return this
     */
    perDay(maxAttempts: number, decayDays?: number): this;
    save(): {
        prifix: string | null;
        specificRoutePrefix: string | null;
        limiterConfig: {
            windowMs: number;
            max: number;
            message: string;
            statusCode: number;
        };
    };
    private handleRequest;
}
export default RouteConfigServiceProvider;
//# sourceMappingURL=RouteConfigServiceProvider.d.ts.map