"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const bcryptjs_1 = __importDefault(require("bcryptjs"));
class BcryptHasher {
    /**
     * Create a new hasher instance.
     *
     * @param  array  $options
     * @return void
     */
    constructor(config) {
        /**
         * The default cost factor.
         *
         * @var int
         */
        this.rounds = 10;
        if (config.rounds)
            this.rounds = config.rounds;
    }
    /**
     * Hash the given value.
     *
     * @param  string  value
     * @return string
     *
     * @throws \RuntimeException
     */
    make(value) {
        try {
            let hash = bcryptjs_1.default.hashSync(value, this.rounds);
            return hash;
        }
        catch (error) {
            throw error;
        }
    }
    /**
     * Check the given plain value against a hash.
     *
     * @param  string  value
     * @param  string  hashedValue
     * @return bool
     *
     * @throws \RuntimeException
     */
    check(value, hashedValue) {
        try {
            let password = bcryptjs_1.default.compareSync(value, hashedValue);
            return password;
        }
        catch (error) {
            throw error;
        }
    }
    /**
     * Gets the number of rounds used to encrypt the specified hash.
     * @param hash  — Hash to extract the used number of rounds from
     * @return number — Number of rounds used
     */
    getRounds(hash) {
        return bcryptjs_1.default.getRounds(hash);
    }
    /**
     * Set the default password work factor.
     *
     * @param  number  rounds
     * @return this
     */
    setRounds(rounds) {
        this.rounds = rounds;
        return this;
    }
}
exports.default = BcryptHasher;
