import Hasher from "./Hasher";
declare class BcryptHasher implements Hasher {
    /**
     * The default cost factor.
     *
     * @var int
     */
    protected rounds: number;
    /**
     * Create a new hasher instance.
     *
     * @param  array  $options
     * @return void
     */
    constructor(config: any);
    /**
     * Hash the given value.
     *
     * @param  string  value
     * @return string
     *
     * @throws \RuntimeException
     */
    make(value: string): string;
    /**
     * Check the given plain value against a hash.
     *
     * @param  string  value
     * @param  string  hashedValue
     * @return bool
     *
     * @throws \RuntimeException
     */
    check(value: string, hashedValue: string): boolean;
    /**
     * Gets the number of rounds used to encrypt the specified hash.
     * @param hash  — Hash to extract the used number of rounds from
     * @return number — Number of rounds used
     */
    getRounds(hash: string): number;
    /**
     * Set the default password work factor.
     *
     * @param  number  rounds
     * @return this
     */
    setRounds(rounds: number): this;
}
export default BcryptHasher;
//# sourceMappingURL=BcryptHasher.d.ts.map