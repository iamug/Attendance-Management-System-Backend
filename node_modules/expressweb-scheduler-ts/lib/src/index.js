"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const node_cron_1 = __importDefault(require("node-cron"));
const shelljs_1 = __importDefault(require("shelljs"));
class Schedule {
    constructor() {
        this.sec = "*";
        this.min = "*";
        this.hour = "*";
        this.day_of_month = "*";
        this.month = "*";
        this.day_of_the_week = "*";
        this.task = null;
        this.commandHandler = null;
        this.environment = null;
        this.setTimezone = null;
        this.closure = () => { };
    }
    /**
     * Command signature should be the name you have in your command class signature property.
     * @param {String} commandSignature
     */
    command(commandSignature) {
        this.commandHandler = commandSignature;
        return this;
    }
    call(closure) {
        this.closure = closure;
        return this;
    }
    run() {
        this.task = node_cron_1.default.schedule(`${this.sec} ${this.min} ${this.hour} ${this.day_of_month} ${this.month} ${this.day_of_the_week}`, () => {
            if (this.closure == null) {
                shelljs_1.default.exec("node maker " + this.commandHandler);
            }
            else {
                this.closure();
            }
        }, {
            scheduled: false,
        });
        this.task.start();
        return this;
    }
    stop() {
        if (this.task != null) {
            this.task.stop();
        }
        return this;
    }
    cron(values) {
        this.task = node_cron_1.default.schedule(`${values}`, () => {
            if (this.closure == null) {
                shelljs_1.default.exec("node maker " + this.commandHandler);
            }
            else {
                this.closure;
            }
        }, {
            scheduled: false,
        });
        this.task.start();
        return this;
    }
    everySecond() {
        this.sec = "*";
        return this;
    }
    everyMinute() {
        this.sec = 0;
        this.min = "*";
        return this;
    }
    everyTwoMinutes() {
        this.sec = 0;
        this.min = "*/2";
        return this;
    }
    everyThreeMinutes() {
        this.sec = 0;
        this.min = "*/3";
        return this;
    }
    everyFourMinutes() {
        this.sec = 0;
        this.min = "*/4";
        return this;
    }
    everyFiveMinutes() {
        this.sec = 0;
        this.min = "*/5";
        return this;
    }
    everyTenMinutes() {
        this.sec = 0;
        this.min = "*/10";
        return this;
    }
    everyFifteenMinutes() {
        this.sec = 0;
        this.min = "*/15";
        return this;
    }
    everyThirtyMinutes() {
        this.sec = 0;
        this.min = "*/30";
        return this;
    }
    hourly() {
        this.sec = 0;
        this.min = 0;
        this.hour = "*";
        return this;
    }
    hourlyAt(min) {
        this.sec = 0;
        this.min = `*/${min}`;
        this.hour = "*";
        return this;
    }
    everyTwoHours() {
        this.sec = 0;
        this.min = 0;
        this.hour = "*/2";
        return this;
    }
    everyThreeHours() {
        this.sec = 0;
        this.min = 0;
        this.hour = "*/3";
        return this;
    }
    everyFourHours() {
        this.sec = 0;
        this.min = 0;
        this.hour = "*/4";
        return this;
    }
    everyFiveHours() {
        this.sec = 0;
        this.min = 0;
        this.hour = "*/5";
        return this;
    }
    everySixHours() {
        this.sec = 0;
        this.min = 0;
        this.hour = "*/6";
        return this;
    }
    daily() {
        this.sec = 0;
        this.min = 0;
        this.hour = 0;
        this.day_of_month = "*";
        this.month = "*";
        this.day_of_the_week = "*";
        return this;
    }
    /**
     * Run task daily at a specified time
     * @param {String} time
     * Example '5:30'
     */
    dailyAt(time) {
        let timer = time.split(":");
        this.sec = 0;
        this.min = `*/${timer[1]}`;
        this.hour = `*/${timer[0]}`;
        this.day_of_month = "*";
        this.month = "*";
        this.day_of_the_week = "*";
        return this;
    }
    twiceDaily(firsttimer, secondTimer) {
        this.sec = 0;
        this.min = 0;
        this.hour = `${firsttimer},${secondTimer}`;
        this.day_of_month = "*";
        this.month = "*";
        this.day_of_the_week = "*";
        return this;
    }
    weekly() {
        this.sec = 0;
        this.min = 0;
        this.hour = 0;
        this.day_of_month = "*";
        this.month = "*";
        this.day_of_the_week = 0;
        return this;
    }
    /**
     * Run the task every week on paarticuler day and time
     * @param {Number} day
     * @param {String} time
     */
    weeklyOn(day, time) {
        let timer = time.split(":");
        this.sec = 0;
        this.min = `*/${timer[1]}`;
        this.hour = `*/${timer[0]}`;
        this.day_of_month = 0;
        this.month = 0;
        this.day_of_the_week = day;
        return this;
    }
    monthly() {
        this.sec = 0;
        this.min = 0;
        this.hour = 0;
        this.day_of_month = 0;
        this.month = "*";
        this.day_of_the_week = "*";
        return this;
    }
    /**
     * Run the task every month on the a particuler day and time
     * @param {Number} dayOfTheMonth
     * @param {String} time
     */
    monthlyOn(dayOfTheMonth, time) {
        let timer = time.split(":");
        this.sec = 0;
        this.min = `*/${timer[1]}`;
        this.hour = `*/${timer[0]}`;
        this.day_of_month = dayOfTheMonth;
        return this;
    }
    /**
     * Run the task monthly on the day 1 and day 2 at a particuler time
     * @param {Number} day1
     * @param {Number} day2
     * @param {String} time
     */
    twiceMonthly(day1, day2, time) {
        let timer = time.split(":");
        this.sec = 0;
        this.min = `*/${timer[1]}`;
        this.hour = `*/${timer[0]}`;
        this.day_of_month = `${day1},${day2}`;
        return this;
    }
    // lastDayOfMonth() {
    //     //
    // }
    //Run the task on the first day of every quarter at 00:00
    quarterly() {
        this.sec = 0;
        this.min = 0;
        this.hour = 0;
        this.day_of_month = 1;
        this.month = "*/3";
        this.day_of_the_week = "*";
        return this;
    }
    //Run the task on the first day of every year at 00:00
    yearly() {
        this.sec = 0;
        this.min = 0;
        this.hour = 0;
        this.day_of_month = 1;
        this.month = 1;
        this.day_of_the_week = "*";
        return this;
    }
    /**
     * Run the task every year on a particuler month,day and time
     * @param {Number} month
     * @param {Number} day
     * @param {String} time
     */
    yearlyOn(month, day, time) {
        let timer = time.split(":");
        this.min = `*/${timer[1]}`;
        this.hour = `*/${timer[0]}`;
        this.day_of_month = day;
        this.month = month;
        return this;
    }
    /**
     * Set setTimezone
     * @param {String} setTimezone
     */
    timezone(setTimezone = null) {
        if (setTimezone !== null)
            this.setTimezone = setTimezone;
        return this;
    }
    //Limit the task to weekdays
    weekdays() {
        this.day_of_the_week = "1-5";
        return this;
    }
    //Limit the task to weekends
    weekends() {
        this.day_of_the_week = "6,0";
        return this;
    }
    //Limit the task to Sunday
    sundays() {
        this.day_of_the_week = "SUN";
        return this;
    }
    //Limit the task to Monday
    mondays() {
        this.day_of_the_week = "MON";
        return this;
    }
    //Limit the task to Tuesday
    tuesdays() {
        this.day_of_the_week = "TUE";
        return this;
    }
    //Limit the task to Wednesday
    wednesdays() {
        this.day_of_the_week = "WED";
        return this;
    }
    //Limit the task to Thursday
    thursdays() {
        this.day_of_the_week = "THU";
        return this;
    }
    //Limit the task to Friday
    fridays() {
        this.day_of_the_week = "FRI";
        return this;
    }
    //Limit the task to Saturday
    saturdays() {
        this.day_of_the_week = "SAT";
        return this;
    }
    /**
     * Limit the task to specific days
     * @param {Object} days
     */
    days(days) {
        if (typeof days == "object") {
            this.day_of_the_week = days;
            return this;
        }
        else {
            console.log("Error: days is not an object. It should be of this format [0,1,2,3,4]");
        }
    }
    // /**
    //  * Limit the task to run between start and end times
    //  * @param {String} startTime
    //  * @param {String} endTime
    //  */
    // between(startTime, endTime) {
    //     //
    // }
    // unlessBetween(startTime, endTime) {
    //     //
    // }
    //Limit the task based on a truth test
    when(Closure) {
        if (Closure)
            return this;
    }
    environments(env = null) {
        if (env !== null)
            this.environment = env;
        return this;
    }
}
exports.default = new Schedule();
