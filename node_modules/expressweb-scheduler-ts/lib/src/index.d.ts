import { ScheduledTask } from "node-cron";
declare class Schedule {
    sec: number | string;
    min: number | string;
    hour: number | string;
    day_of_month: number | string;
    month: number | string;
    day_of_the_week: number | string | object;
    task: ScheduledTask | null;
    commandHandler: null | string;
    environment: null | number;
    setTimezone: null | string;
    closure: Function;
    constructor();
    /**
     * Command signature should be the name you have in your command class signature property.
     * @param {String} commandSignature
     */
    command(commandSignature: string): this;
    call(closure: Function): this;
    run(): this;
    stop(): this;
    cron(values: string): this;
    everySecond(): this;
    everyMinute(): this;
    everyTwoMinutes(): this;
    everyThreeMinutes(): this;
    everyFourMinutes(): this;
    everyFiveMinutes(): this;
    everyTenMinutes(): this;
    everyFifteenMinutes(): this;
    everyThirtyMinutes(): this;
    hourly(): this;
    hourlyAt(min: number): this;
    everyTwoHours(): this;
    everyThreeHours(): this;
    everyFourHours(): this;
    everyFiveHours(): this;
    everySixHours(): this;
    daily(): this;
    /**
     * Run task daily at a specified time
     * @param {String} time
     * Example '5:30'
     */
    dailyAt(time: string): this;
    twiceDaily(firsttimer: number, secondTimer: number): this;
    weekly(): this;
    /**
     * Run the task every week on paarticuler day and time
     * @param {Number} day
     * @param {String} time
     */
    weeklyOn(day: number, time: string): this;
    monthly(): this;
    /**
     * Run the task every month on the a particuler day and time
     * @param {Number} dayOfTheMonth
     * @param {String} time
     */
    monthlyOn(dayOfTheMonth: number, time: string): this;
    /**
     * Run the task monthly on the day 1 and day 2 at a particuler time
     * @param {Number} day1
     * @param {Number} day2
     * @param {String} time
     */
    twiceMonthly(day1: number, day2: number, time: string): this;
    quarterly(): this;
    yearly(): this;
    /**
     * Run the task every year on a particuler month,day and time
     * @param {Number} month
     * @param {Number} day
     * @param {String} time
     */
    yearlyOn(month: number, day: number, time: string): this;
    /**
     * Set setTimezone
     * @param {String} setTimezone
     */
    timezone(setTimezone?: null | string): this;
    weekdays(): this;
    weekends(): this;
    sundays(): this;
    mondays(): this;
    tuesdays(): this;
    wednesdays(): this;
    thursdays(): this;
    fridays(): this;
    saturdays(): this;
    /**
     * Limit the task to specific days
     * @param {Object} days
     */
    days(days: object): this | undefined;
    when(Closure: Function): this | undefined;
    environments(env?: null): this;
}
declare const _default: Schedule;
export default _default;
//# sourceMappingURL=index.d.ts.map